Jenkins 插件安装
	
Publish Over SSH


Jenkins 系统管理-系统设置

Publish over SSH
/root/.ssh/id_rsa
SSH Servers	
142-stg
192.168.224.142
/tmp


========================================正式环境部署====================================================




Dockerfile

# node底包
FROM node:9.11.1 as builder
# 定义容器中的工作路径
WORKDIR /app
# 安装依赖
COPY package.json package-lock.json yarn.lock ./
RUN npm config set registry 'https://registry.npm.taobao.org' \
    && npm install --pure-lockfile
# 拷贝所有文件
COPY . .
COPY app/utils/serverUrl.sample.js ./app/utils/serverUrl.js
#定义环境变量 平台代号
ARG SITE_CODE
ARG GATEWAY
# 构建打包
RUN npm run build

FROM nginx:stable
COPY --from=builder /app/.nginx.conf /etc/nginx/conf.d/default.conf
COPY --from=builder /app/build /usr/share/nginx/html







PROJECT_PATH="/tmp/prod-${BUILD_ID}"
GIT_URL="ssh://git@gitlab.fslola.cn:8011/it/etm-frontend.git"
IMAGE_NAME="51etm"
REGISTRY="192.168.16.191:5000"
mkdir $PROJECT_PATH
echo "=====下载项目到$PROJECT_PATH====="
git clone -v --depth 1 -b production $GIT_URL $PROJECT_PATH
cd $PROJECT_PATH
echo "=====构建镜像$IMAGE_NAME====="
docker image build  -t $REGISTRY/$IMAGE_NAME:production --build-arg SITE_CODE=$IMAGE_NAME --build-arg GATEWAY=https://java-getway.51etm.com  .
docker push $REGISTRY/$IMAGE_NAME:production
echo "=====查看镜像推送状态====="
curl -X GET $REGISTRY/v2/_catalog

curl -X GET $REGISTRY/v2/$IMAGE_NAME/tags/list

cd ..
rm -rf $PROJECT_PATH
echo "=====推送完成====="





IMAGE_NAME="reg.fslola.cn:8083/51etm:production"
CONTAINER_NAME="51etm"
#内部端口号
INNER_PORT=80
#外部端口号
OUTER_PORT=8010
docker pull $IMAGE_NAME
if docker ps -a | grep -i $CONTAINER_NAME;then
docker container rm -f $CONTAINER_NAME
fi
docker run -d -p $OUTER_PORT:$INNER_PORT --restart=always --name=$CONTAINER_NAME $IMAGE_NAME

echo "=====OK====="


















nginx.conf
server {
    listen       80;
    server_name  localhost;

	  gzip on;
    gzip_disable "msie6";

    gzip_comp_level 6;
    gzip_min_length 1100;
    gzip_buffers 16 8k;
    gzip_proxied any;
    gzip_types text/css text/javascript text/xml text/plain application/javascript application/x-javascript application/json application/xml application/rss+xml application/atom+xml font/truetype font/opentype image/x-icon image/svg+xml;

   # Always serve index.html for any request
  location / {
    root /usr/share/nginx/html;
    try_files $uri /index.html;
  }

# Do not cache sw.js, required for offline-first updates.
  location /sw.js {
      add_header Cache-Control "no-cache";
      proxy_cache_bypass $http_pragma;
      proxy_cache_revalidate on;
      expires off;
      access_log off;
  }
}



========================================完====================================================






















========================================测试环境部署====================================================


Dockerfile

# node底包
FROM node:9.11.1 as builder
# 定义容器中的工作路径
WORKDIR /app
# 安装依赖
COPY package.json package-lock.json yarn.lock ./
RUN npm config set registry 'https://registry.npm.taobao.org' \
    && npm install --pure-lockfile
# 拷贝所有文件
COPY . .
COPY app/utils/serverUrl.sample.js ./app/utils/serverUrl.js
#定义环境变量 平台代号
ARG SITE_CODE
ARG GATEWAY
# 构建打包
RUN npm run build

FROM nginx:stable
COPY --from=builder /app/.nginx.conf /etc/nginx/conf.d/default.conf
COPY --from=builder /app/build /usr/share/nginx/html






nginx.conf
server {
    listen       80;
    server_name  localhost;

	  gzip on;
    gzip_disable "msie6";

    gzip_comp_level 6;
    gzip_min_length 1100;
    gzip_buffers 16 8k;
    gzip_proxied any;
    gzip_types text/css text/javascript text/xml text/plain application/javascript application/x-javascript application/json application/xml application/rss+xml application/atom+xml font/truetype font/opentype image/x-icon image/svg+xml;

   # Always serve index.html for any request
  location / {
    root /usr/share/nginx/html;
    try_files $uri /index.html;
  }

# Do not cache sw.js, required for offline-first updates.
  location /sw.js {
      add_header Cache-Control "no-cache";
      proxy_cache_bypass $http_pragma;
      proxy_cache_revalidate on;
      expires off;
      access_log off;
  }
}





构建
Execute shell script on remote host using ssh
 	SSH site		
 	Command	

PROJECT_PATH="/tmp/${BUILD_NAME}-stage"
GIT_URL="ssh://git@gitlab.fslola.cn:8011/it/etm-frontend.git"
IMAGE_NAME="51etm"
REGISTRY="192.168.16.191:5000"
rm -rf $PROJECT_PATH
mkdir $PROJECT_PATH
echo "=====下载项目到$PROJECT_PATH====="
git clone -v --depth 1 -b staging $GIT_URL $PROJECT_PATH
cd $PROJECT_PATH
echo "=====构建镜像$IMAGE_NAME====="
docker image build  -t $REGISTRY/$IMAGE_NAME:staging --build-arg SITE_CODE=$IMAGE_NAME  .
docker push $REGISTRY/$IMAGE_NAME:staging
echo "=====查看镜像推送状态====="
curl -X GET $REGISTRY/v2/_catalog

curl -X GET $REGISTRY/v2/$IMAGE_NAME/tags/list

cd ..
rm -rf $PROJECT_PATH
echo "=====推送完成====="







Execute shell script on remote host using ssh
 	SSH site		
 	Command	



IMAGE_NAME="51etm"
CONTAINER_NAME="51etm"
#内部端口号
INNER_PORT=80
#外部端口号
OUTER_PORT=8010
docker pull localhost:5000/$IMAGE_NAME:staging
if docker ps -a | grep -i $CONTAINER_NAME;then
docker container rm -f $CONTAINER_NAME
fi
docker run -d -p $OUTER_PORT:$INNER_PORT --restart=always --name=$CONTAINER_NAME localhost:5000/$IMAGE_NAME:staging

echo "=====发布完成====="




========================================测试环境部署完====================================================







